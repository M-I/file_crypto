* Build
** Tangle src
   #+BEGIN_SRC erlang :noweb yes :mkdirp yes :tangle src/file_crypto.erl
     %% Licensed under the Apache License, Version 2.0 (the "License"); you may
     %% not use this file except in compliance with the License. You may obtain
     %% a copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>
     %%
     %% Unless required by applicable law or agreed to in writing, software
     %% distributed under the License is distributed on an "AS IS" BASIS,
     %% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     %% See the License for the specific language governing permissions and
     %% limitations under the License.
     %%
     %% @author Marc Igeleke
     %% @copyright 2020 Marc Igeleke
     %% @doc Crypto helper function to use on files. 

     -module(file_crypto).
     -export([hash/2]).

     <<<typespec>>>

     <<<exported_fun>>>

     <<<local_fun>>>

     <<<tests>>>
   #+END_SRC

 - In emacs: 'M-x org-babel-tangle'  (org-babel-tangle)

** Makefile
#+BEGIN_SRC makefile :mkdirp yes :tangle Makefile
  PROJECT = file_crypto
  PROJECT_VERSION = 1.0.1

  LOCAL_DEPS = crypto

  include erlang.mk

  EDOC_OPTS = {dir, "docs"}
  docs:: edoc
#+END_SRC

** Make
#+BEGIN_SRC sh
  cd file_crypto
  ## use gmake if available
  if command -v gmake >/dev/null; then
    gmake
  else
    make
  fi
#+END_SRC

** Docs
#+BEGIN_SRC sh
  make docs
#+End_SRC

** Tests
#+BEGIN_SRC sh
  make tests
#+End_SRC
* Module
** Data Types
  #+NAME: typespec
  #+BEGIN_SRC erlang

    -type filename_all() :: string() | binary() | atom().
    -type posix()     :: 'eacces'  | 'eagain'  | 'ebadf'   | 'ebusy'  | 'edquot'
		       | 'eexist'  | 'efault'  | 'efbig'   | 'eintr'  | 'einval'
		       | 'eio'     | 'eisdir'  | 'eloop'   | 'emfile' | 'emlink'
		       | 'enametoolong'
		       | 'enfile'  | 'enodev'  | 'enoent'  | 'enomem' | 'enospc'
		       | 'enotblk' | 'enotdir' | 'enotsup' | 'enxio'  | 'eperm'
		       | 'epipe'   | 'erofs'   | 'espipe'  | 'esrch'  | 'estale'
		       | 'exdev'.


    -type compatibility_only_hash() :: md5 | md4 .
    -type sha1() :: sha .
    -type sha2() :: sha224 | sha256 | sha384 | sha512 .
    %% Since OTP 22
    -type sha3() :: sha3_224 | sha3_256 | sha3_384 | sha3_512 .
    -type blake2() :: blake2b | blake2s .


    -type hash_algorithm() :: sha1() | sha2() | sha3() | blake2() | ripemd160 | compatibility_only_hash() .

   #+END_SRC

** Exported Functions
  #+NAME: exported_fun
  #+BEGIN_SRC erlang
    %% @doc Computes a message digest of type `Type' from `File'.
    %% May raise exception error:notsup in case the chosen Type is not supported by the underlying libcrypto implementation.
    -spec hash(Type, File) -> {ok, binary()} | {error, Reason} when
	  File :: filename_all(),
	  Type :: hash_algorithm(),
	  Reason ::  posix() | badarg.
    hash(Type, File) ->
	case file:open(File, [binary]) of
	    {ok, IoDevice} ->
		Context = crypto:hash_init(Type),
		Result = do_digest(IoDevice, Context),
		file:close(IoDevice),
		Result;
	    Err -> Err
	end.
  #+END_SRC

** Local Functions
  #+NAME: local_fun
  #+BEGIN_SRC erlang
    do_digest(IoDevice, Context) ->
	case file:read(IoDevice, 40960) of
	      {ok, Data} ->
		do_digest(IoDevice, crypto:hash_update(Context, Data));
	    eof ->
		file:close(IoDevice),
		{ok, crypto:hash_final(Context)};
	    Err -> Err
	end.
  #+END_SRC

** Tests
   #+NAME: tests
   #+BEGIN_SRC erlang
     -ifdef(TEST).
     -include_lib("eunit/include/eunit.hrl").

     hash_test_() ->
	 ?_assert([begin
		      if N < 10 -> 48 + N; true -> 87 + N end
		  end || <<N:4>> <= begin
		  {ok,Binary} = file_crypto:hash(md5,"test/md5.gif"),
		  Binary end]
		 =:= "f5ca4f935d44b85c431a8bf788c0eaca").

     -endif.
   #+END_SRC
* COMMENT settings
** babel
  Local Variables:
  org-babel-noweb-wrap-start: "<<<"
  org-babel-noweb-wrap-end: ">>>"
  org-confirm-babel-evaluate: nil
  End:

** git
   #+BEGIN_SRC :tangle file_crypto/.gitignore
     deps/*
     ebin/*
     .eunit/*
     _rel/*
     .erlang.mk.packages*
     priv/*
     .rebar/*
     src/*.beam
     test/*.beam
     erl_crash.dump
     .erlang.mk/*
     .DS_Store
     \#*\#
   #+END_SRC
